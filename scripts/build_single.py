from __future__ import annotations

import os
from pathlib import Path

# Корень репозитория
ROOT = Path(__file__).resolve().parent.parent
# Выходной файл-монолит
OUT_FILE = ROOT / "juicyfox_bot_single.py"
# Каталоги, которые нужно склеивать
INCLUDE_DIRS = ["api", "apps", "modules", "shared"]

HEADER = """# ==============================================================
# Autogenerated by scripts/build_single.py
# DO NOT EDIT MANUALLY — your changes will be overwritten.
#
# Plan A monolith – aiogram + FastAPI
# ==============================================================

"""

def collect_sources() -> list[str]:
    """
    Собирает код всех .py файлов в INCLUDE_DIRS, исключая __init__.py
    и дублирующиеся импорты.
    """
    sources: list[str] = []
    seen_imports: set[str] = set()
    for folder in INCLUDE_DIRS:
        base = ROOT / folder
        if not base.exists():
            continue
        for path in sorted(base.rglob("*.py")):
            if path.name == "__init__.py":
                continue
            rel = path.relative_to(ROOT)
            with open(path, "r", encoding="utf-8") as f:
                code = f.readlines()
            processed: list[str] = []
            for line in code:
                # игнорируем future-импорты
                if line.startswith("from __future__"):
                    continue
                # добавляем уникальные импорты
                if line.startswith(("import ", "from ")):
                    if line not in seen_imports:
                        seen_imports.add(line)
                        processed.append(line)
                else:
                    processed.append(line)
            # добавляем маркер между файлами
            sources.append(f"\n# ==== {rel} ====\n")
            sources.extend(processed)
    return [HEADER] + sources

def build() -> None:
    code = collect_sources()
    # Добавляем «клей»: экспорт dp, bot, bot_pool и run_bot
    glue = """
# ========== Plan A compatibility glue ==========
import os
try:
    # Импортируем bot и dp из модульного entrypoint
    from apps.bot_core.main import bot, dp  # type: ignore
    BOT_ID = os.getenv("BOT_ID") or "sample"
    bot_pool = {BOT_ID: bot}
    async def run_bot():
        # В Plan A боты инициализируются в стартап-событии FastAPI,
        # поэтому в run_bot() ничего вызывать не нужно
        return
except Exception:
    # Если импорт не удался, оставляем заглушки для обратной совместимости
    bot = None
    dp = None
    bot_pool = {}
    async def run_bot():
        return
"""
    code.append(glue)
    # Записываем итоговый монолит
    with open(OUT_FILE, "w", encoding="utf-8") as f:
        f.writelines(code)
    print(f"[build_single] ✅ Generated {OUT_FILE}")

if __name__ == "__main__":
    build()
