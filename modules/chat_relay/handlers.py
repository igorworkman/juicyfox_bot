# modules/chat_relay/handlers.py
from __future__ import annotations

import os
import logging
import time
from typing import Optional, Dict, Any, List

# REGION AI: imports
import asyncio
from aiogram.exceptions import TelegramNetworkError
# END REGION AI

from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message

router = Router()
log = logging.getLogger("juicyfox.chat_relay")

# === –ö–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ ENV ===
RELAY_GROUP_ID = int(os.getenv("RELAY_GROUP_ID") or os.getenv("CHAT_GROUP_ID") or "0")
HISTORY_GROUP_ID = int(os.getenv("HISTORY_GROUP_ID") or "0")  # –µ—Å–ª–∏ –∑–∞–¥–∞–Ω ‚Äî /history –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
MODEL_NAME = os.getenv("MODEL_NAME", "Juicy Fox")
USER_STREAK_LIMIT = int(os.getenv("RELAY_STREAK_LIMIT", "3"))   # –º–∞–∫—Å–∏–º—É–º –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
HISTORY_DEFAULT_N = int(os.getenv("RELAY_HISTORY_DEFAULT", "20"))

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å shared.db.repo; –∏–Ω–∞—á–µ ‚Äî in-memory) ===
class _Repo:
    def __init__(self) -> None:
        self._mem_messages: Dict[int, List[Dict[str, Any]]] = {}
        self._streak: Dict[int, int] = {}
        try:
            from shared.db import repo as ext  # type: ignore
            self._ext = ext  # –æ–∂–∏–¥–∞—é—Ç—Å—è async-—Ñ—É–Ω–∫—Ü–∏–∏
            log.info("chat_relay: using shared.db.repo backend")
        except Exception:
            self._ext = None
            log.info("chat_relay: using in-memory backend")

    # --- –°—á—ë—Ç—á–∏–∫ –ø–æ–¥—Ä—è–¥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
    async def inc_streak(self, user_id: int) -> int:
        if self._ext:
            try:
                return int(await self._ext.inc_streak(user_id))  # type: ignore
            except Exception as e:
                log.warning("repo.inc_streak failed, fallback: %s", e)
        self._streak[user_id] = self._streak.get(user_id, 0) + 1
        return self._streak[user_id]

    async def reset_streak(self, user_id: int) -> None:
        if self._ext:
            try:
                await self._ext.reset_streak(user_id)  # type: ignore
                return
            except Exception as e:
                log.warning("repo.reset_streak failed, fallback: %s", e)
        self._streak[user_id] = 0

    async def get_streak(self, user_id: int) -> int:
        if self._ext:
            try:
                return int(await self._ext.get_streak(user_id))  # type: ignore
            except Exception as e:
                log.warning("repo.get_streak failed, fallback: %s", e)
        return self._streak.get(user_id, 0)

    # --- –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
    async def log_message(self, user_id: int, direction: str, content: Dict[str, Any]) -> None:
        if self._ext:
            try:
                await self._ext.log_message(user_id, direction, content)  # type: ignore
                return
            except Exception as e:
                log.warning("repo.log_message failed, fallback: %s", e)
        buf = self._mem_messages.setdefault(user_id, [])
        buf.append(content | {"direction": direction})

    async def get_history(self, user_id: int, limit: int) -> List[Dict[str, Any]]:
        if self._ext:
            try:
                return list(await self._ext.get_history(user_id, limit))  # type: ignore
            except Exception as e:
                log.warning("repo.get_history failed, fallback: %s", e)
        return list(self._mem_messages.get(user_id, []))[-limit:]


_repo = _Repo()


def _fmt_from(msg: Message) -> str:
    u = msg.from_user
    uid = u.id if u else "unknown"
    uname = f"@{u.username}" if u and u.username else ""
    name = f"{u.full_name}" if u else ""
    return f"from: {uid} {uname} {name}".strip()


def _now_ts() -> int:
    return int(time.time())


# ========== –í—Ö–æ–¥—è—â–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É ==========
@router.message(F.chat.type == "private")
async def relay_incoming_to_group(msg: Message):
    """
    –õ—é–±–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ö–†–û–ú–ï –∫–æ–º–∞–Ω–¥, —É—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É.
    –ö–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å '/') –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    """
    if not RELAY_GROUP_ID:
        return

    # REGION AI: retry helper
    async def _send_with_retry(func, *args, **kwargs):
        for attempt in range(3):
            try:
                await func(*args, **kwargs)
                return
            except TelegramNetworkError as e:
                if attempt == 2:
                    log.exception("relay to group failed: %s", e)
                else:
                    await asyncio.sleep(1)
            except Exception as e:
                log.exception("relay to group failed: %s", e)
                return
    # END REGION AI

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ "/start", "/help", "/..."
    if msg.text and msg.text.startswith("/"):
        return

    uid = msg.from_user.id
    caption_header = _fmt_from(msg)
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ "–º–µ–¥–∏–∞ + –ø–æ–¥–ø–∏—Å—å": —Ç–µ–∫—Å—Ç –±–µ—Ä—ë–º –∏–∑ msg.text –ò–õ–ò msg.caption
    content_text = (msg.text or msg.caption or "").strip()

    # 1) –õ–∏–º–∏—Ç –ø–æ–¥—Ä—è–¥ –≤—Ö–æ–¥—è—â–∏—Ö
    streak = await _repo.inc_streak(uid)
    if streak > USER_STREAK_LIMIT:
        try:
            await msg.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å –º–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ üòò\n–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n‚Äî {MODEL_NAME}")
        except Exception:
            pass
        # –∏—Å—Ç–æ—Ä–∏—é –≤—Å—ë —Ä–∞–≤–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –≤ –≥—Ä—É–ø–ø—É –Ω–µ —à–ª—ë–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await _repo.log_message(uid, "in", {
            "type": "text" if msg.text else "media",
            "text": content_text or None,
            "ts": _now_ts()
        })
        return

    # 2) –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É + –ª–æ–≥
    try:
        sent = False
        if msg.text:
            # REGION AI: relay send text
            asyncio.create_task(_send_with_retry(msg.bot.send_message, RELAY_GROUP_ID, f"{caption_header}\n\n{content_text}"))
            # END REGION AI
            sent = True
            await _repo.log_message(uid, "in", {"type": "text", "text": content_text, "ts": _now_ts()})

        elif msg.photo:
            cap = f"{caption_header}\n\n{content_text}" if content_text else caption_header
            # REGION AI: relay send photo
            asyncio.create_task(_send_with_retry(msg.bot.send_photo, RELAY_GROUP_ID, msg.photo[-1].file_id, caption=cap))
            # END REGION AI
            sent = True
            await _repo.log_message(uid, "in", {"type": "photo", "file_id": msg.photo[-1].file_id, "text": content_text or None, "ts": _now_ts()})

        elif msg.video:
            cap = f"{caption_header}\n\n{content_text}" if content_text else caption_header
            # REGION AI: relay send video
            asyncio.create_task(_send_with_retry(msg.bot.send_video, RELAY_GROUP_ID, msg.video.file_id, caption=cap))
            # END REGION AI
            sent = True
            await _repo.log_message(uid, "in", {"type": "video", "file_id": msg.video.file_id, "text": content_text or None, "ts": _now_ts()})

        elif msg.voice:
            cap = f"{caption_header}\n\n{content_text}" if content_text else caption_header
            # REGION AI: relay send voice
            asyncio.create_task(_send_with_retry(msg.bot.send_voice, RELAY_GROUP_ID, msg.voice.file_id, caption=cap))
            # END REGION AI
            sent = True
            await _repo.log_message(uid, "in", {"type": "voice", "file_id": msg.voice.file_id, "text": content_text or None, "ts": _now_ts()})

        elif msg.document:
            cap = f"{caption_header}\n\n{content_text}" if content_text else caption_header
            # REGION AI: relay send document
            asyncio.create_task(_send_with_retry(msg.bot.send_document, RELAY_GROUP_ID, msg.document.file_id, caption=cap))
            # END REGION AI
            sent = True
            await _repo.log_message(uid, "in", {"type": "document", "file_id": msg.document.file_id, "text": content_text or None, "ts": _now_ts()})

        elif msg.animation:
            cap = f"{caption_header}\n\n{content_text}" if content_text else caption_header
            # REGION AI: relay send animation
            asyncio.create_task(_send_with_retry(msg.bot.send_animation, RELAY_GROUP_ID, msg.animation.file_id, caption=cap))
            # END REGION AI
            sent = True
            await _repo.log_message(uid, "in", {"type": "animation", "file_id": msg.animation.file_id, "text": content_text or None, "ts": _now_ts()})

        elif msg.sticker:
            # REGION AI: relay send sticker
            asyncio.create_task(_send_with_retry(msg.bot.send_message, RELAY_GROUP_ID, f"{caption_header}\n\n[sticker] {msg.sticker.emoji or ''}".strip()))
            # END REGION AI
            sent = True
            await _repo.log_message(uid, "in", {"type": "sticker", "text": msg.sticker.emoji or None, "ts": _now_ts()})

        if not sent:
            # REGION AI: relay send unknown
            asyncio.create_task(_send_with_retry(msg.bot.send_message, RELAY_GROUP_ID, f"{caption_header}\n\n[unsupported content]"))
            # END REGION AI
            await _repo.log_message(uid, "in", {"type": "unknown", "ts": _now_ts()})

    except Exception as e:
        log.exception("relay to group failed: %s", e)


# ========== –û—Ç–≤–µ—Ç –∏–∑ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ==========
@router.message(Command("r"))
async def reply_from_group(cmd: Message, command: CommandObject):
    """
    /r <user_id> <—Ç–µ–∫—Å—Ç>  ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –≥—Ä—É–ø–ø—ã
    –ï—Å–ª–∏ —ç—Ç–æ reply –≤ –≥—Ä—É–ø–ø–µ, –º–æ–∂–Ω–æ: –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å /r <—Ç–µ–∫—Å—Ç>
    """
    if cmd.chat.type not in {"group", "supergroup"}:
        return

    args = (command.args or "").strip()
    reply_to: Optional[Message] = cmd.reply_to_message

    # –í–∞—Ä–∏–∞–Ω—Ç 1: /r 12345 hello there
    if args:
        parts = args.split(maxsplit=1)
        if len(parts) == 2 and parts[0].isdigit():
            user_id = int(parts[0])
            text = parts[1]
            try:
                await cmd.bot.send_message(user_id, text)
                await _repo.log_message(user_id, "out", {"type": "text", "text": text, "ts": _now_ts()})
                await cmd.reply("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            finally:
                # –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–ø–∞–ª–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏–ª—Å—è
                await _repo.reset_streak(user_id)
            return

    # –í–∞—Ä–∏–∞–Ω—Ç 2: reply –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + /r —Ç–µ–∫—Å—Ç
    if reply_to and args:
        lines = (reply_to.caption or reply_to.text or "").splitlines()
        if lines and lines[0].startswith("from:"):
            try:
                user_id = int(lines[0].split()[1])
                try:
                    await cmd.bot.send_message(user_id, args)
                    await _repo.log_message(user_id, "out", {"type": "text", "text": args, "ts": _now_ts()})
                    await cmd.reply("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                finally:
                    await _repo.reset_streak(user_id)
                return
            except Exception:
                pass

    await cmd.reply("‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /r <user_id> <—Ç–µ–∫—Å—Ç>\n–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /r <—Ç–µ–∫—Å—Ç>")


# ========== –ò—Å—Ç–æ—Ä–∏—è ==========
@router.message(Command("history"))
async def history_cmd(m: Message, command: CommandObject):
    """
    /history <user_id> [N]
    –ï—Å–ª–∏ –∑–∞–¥–∞–Ω HISTORY_GROUP_ID ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–∞–º.
    """
    if m.chat.type not in {"group", "supergroup"}:
        return
    if HISTORY_GROUP_ID and m.chat.id != HISTORY_GROUP_ID:
        return  # —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–Ω–µ —Å–ø–µ—Ü-–≥—Ä—É–ø–ø—ã

    args = (command.args or "").split()
    if not args or not args[0].isdigit():
        await m.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <user_id> [N]")
        return
    user_id = int(args[0])
    try:
        limit = int(args[1]) if len(args) > 1 else HISTORY_DEFAULT_N
    except Exception:
        limit = HISTORY_DEFAULT_N

    messages = await _repo.get_history(user_id, limit)
    if not messages:
        await m.reply("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    # –§–æ—Ä–º–∞—Ç: ¬´hh:mm in/out [type] —Ç–µ–∫—Å—Ç/—Ñ–∞–π–ª (—É—Å–µ—á—ë–Ω)¬ª
    def _fmt_msg(rec: Dict[str, Any]) -> str:
        t = time.strftime("%H:%M", time.localtime(rec.get("ts", _now_ts())))
        direction = rec.get("direction", "?")
        typ = rec.get("type", "text")
        text = (rec.get("text") or rec.get("file_id") or "").replace("\n", " ")
        if len(text) > 64:
            text = text[:60] + "‚Ä¶"
        return f"{t} {direction:<3} [{typ}] {text}"

    chunk = "\n".join(_fmt_msg(r) for r in messages[-limit:])
    await m.reply(f"–ò—Å—Ç–æ—Ä–∏—è {user_id} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit}):\n{chunk}")
